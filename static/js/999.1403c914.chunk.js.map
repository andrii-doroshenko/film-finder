{"version":3,"file":"static/js/999.1403c914.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.jsx","pages/MovieDetails/MovieDetails.styled.js","components/Trailer/Trailer.jsx","pages/MovieDetails/MovieDetails.jsx","utils/Loading.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { BsArrowLeft } from 'react-icons/bs';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  color: #212121;\n\n  :hover {\n    color: orange;\n  }\n`;\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <BsArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nBackLink.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default BackLink;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Image = styled.img`\n  display: block;\n  margin: 0 auto;\n`;\n\nexport const Section = styled.section`\n  &:not(:last-child) {\n    border-bottom: 2px solid lightgray;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 15px;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  color: #212121;\n  \n  &.active {\n    color: orange;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  @media screen and (min-width: 420px) {\n    display: flex;\n  }\n`;\n","import YouTube from 'react-youtube';\nimport styled from 'styled-components';\n\nconst TrailerWrapper = styled.div`\n    padding: 0 15px;\n    margin-bottom: 15px;\n`\n\nconst VideoYouTube = ({ id }) => {\n  const opts = {\n    playerVars: {\n      autoplay: 0,\n      controls: 1,\n      modestbranding: 1,\n      preload: 'metadata',\n    },\n  };\n\n  const styles = {\n    display: 'flex',\n    justifyContent: 'center',\n  };\n\n  return (\n    <TrailerWrapper>\n      <h3>Official Trailer</h3>\n      <YouTube\n        videoId={id}\n        className=\"container\"\n        style={styles}\n        title=\"YouTube Video Trailer\"\n        opts={opts}\n      />\n    </TrailerWrapper>\n  );\n};\n\nexport default VideoYouTube;\n","import { useEffect, useState, useRef } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport BackLink from '../../components/BackLink/BackLink';\nimport fetchMovies from 'services/moviesApi';\nimport {\n  Image,\n  Section,\n  Container,\n  StyledLink,\n  Wrapper,\n} from './MovieDetails.styled';\nimport isLoading from 'utils/Loading';\nimport VideoYouTube from 'components/Trailer/Trailer';\n\nconst MovieDetails = () => {\n  const [details, setDetails] = useState(null);\n  const [trailerKey, setTrailerKey] = useState('');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    isLoading(true);\n\n    const fetchDetails = async () => {\n      const response = await fetchMovies(`/movie/${movieId}`);\n\n      isLoading(false);\n      setDetails(response.data);\n    };\n\n    //закончил добівать key відео\n    const fetchTrailer = async () => {\n      const { data } = await fetchMovies(`/movie/${movieId}/videos`);\n\n      if (\n        data.results.length < 1 ||\n        !data.results.some(item => item.type === 'Trailer')\n      ) {\n        console.log('No trailer results');\n        return;\n      }\n\n      const filteredResult = data.results.filter(\n        result => result.type === 'Trailer'\n      );\n\n      setTrailerKey(filteredResult[0].key);\n    };\n\n    fetchDetails();\n    fetchTrailer();\n  }, [movieId]);\n  return (\n    <>\n      {details && (\n        <div>\n          <Section>\n            <Wrapper>\n              <Container>\n                <BackLink to={backLinkHref.current}>Back</BackLink>\n                {\n                  <Image\n                    src={`https://image.tmdb.org/t/p/w185/${details.poster_path}`}\n                    width={'185'}\n                    alt={details.title}\n                  />\n                }\n              </Container>\n              <Container>\n                <h2>{details.title}</h2>\n                <p>User score: {Math.round(details.vote_average)} / 10</p>\n                <b>Overview</b>\n                <p>{details.overview}</p>\n                <b>Genres</b>\n                <p>{details.genres.map(({ name }) => name).join(', ')}</p>\n              </Container>\n            </Wrapper>\n          </Section>\n\n          <Section>\n            <VideoYouTube id={trailerKey} />\n          </Section>\n\n          <Section>\n            <Container>\n              <b>Additional information</b>\n              <ul>\n                <li>\n                  <StyledLink to={'cast'}>Cast</StyledLink>\n                </li>\n                <li>\n                  <StyledLink to={'reviews'}>Reviews</StyledLink>\n                </li>\n              </ul>\n            </Container>\n          </Section>\n          <Section>\n            <Container>\n              <Outlet />\n            </Container>\n          </Section>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PropTypes from 'prop-types';\n\nconst isLoading = toggle => {\n  if (!toggle) {\n    return Loading.remove();\n  } else {\n    return Loading.standard({\n      backgroundColor: 'transparent',\n      svgColor: 'orange',\n    });\n  }\n};\n\nisLoading.propTypes = {\n  toggle: PropTypes.bool.isRequired,\n};\n\nexport default isLoading;\n"],"names":["StyledLink","styled","Link","to","children","size","Image","Section","Container","NavLink","Wrapper","TrailerWrapper","id","videoId","className","style","display","justifyContent","title","opts","playerVars","autoplay","controls","modestbranding","preload","useState","details","setDetails","trailerKey","setTrailerKey","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","isLoading","fetchDetails","fetchMovies","response","data","fetchTrailer","results","length","some","item","type","console","log","filteredResult","filter","result","key","current","src","poster_path","width","alt","Math","round","vote_average","overview","genres","map","name","join","toggle","Loading","backgroundColor","svgColor","propTypes","PropTypes"],"sourceRoot":""}